1. Git clone
Baixar o Codigo fonte do Github, clonar versão mais recente de um projeto em um repositório para o Computador local.
Exemplo:
git clone <https://link-com-o-nome-do-repositório>

2. Git branch

Branches (algo como ramificações, em português) Permite trabalhar em paralelo no mesmo projeto simultaneamente. 
Como criar uma branch:

git branch <nome-da-branch>

Esse comando criará uma branch em seu local de trabalho. Para fazer o push (algo como enviar) da nova branch para o repositório remoto, você precisa usar o comando a seguir:

git push -u <local-remoto> <nome-da-branch>

Como ver as branches:

git branch ou git branch --list

Como excluir uma branch:

git branch -d <nome-da-branch>

3. Git checkout

Para trocar de uma branch para outra e para fazer o checkout de arquivos e commits.

git checkout <nome-da-branch>

Existem alguns passos que você precisa seguir para trocar de branch com sucesso:

    As alterações em sua branch atual devem estar em um commit ou em um stash antes de você fazer a troca
    A branch na qual você quer fazer o checkout deve existir no seu espaço de trabalho local

Também existe um comando de atalho que permite criar e automaticamente trocar para a branch criada ao mesmo tempo:

git checkout -b <nome-da-branch>

Esse comando cria a branch em seu espaço de trabalho local (a flag -b representa a branch) e faz o checkout na nova branch logo após sua criação.

4. Git status

O comando git status nos dá todas as informações necessárias sobre a branch atual e os arquivos

git status


5. Git add

Ao criarmos, modificarmos ou excluirmos um arquivo, essas alterações acontecerão em nosso espaço de trabalho local e não serão incluídas no próximo commit (a menos que alteremos as configurações).
Faz com que o arquivo´s para staged

git add <arquivo>


git add *


6. Git commit

Git commit é como definir um ponto de verificação no processo de desenvolvimento. Você pode voltar a esse ponto mais tarde, se necessário.

Também precisamos escrever uma mensagem breve para explicar o que desenvolvemos ou alteramos no código-fonte.

git commit -m "mensagem do commit"

Importante: git commit salva suas alterações no espaço de trabalho local.

7. Git push

Após fazer o commit de suas alterações, a próxima coisa a fazer é enviar suas alterações ao servidor remoto. Git push faz o upload dos seus commits no repositório remoto.

git push <repositório-remoto> <nome-da-branch>

git push origin <nome-da-branch> (pode ser master por exemplo)

Importante: git push somente faz o upload das alterações que já estão em um commit.

8. Git pull

O comando git pull é usado para obter as atualizações de um repositório remoto. Recebe as atualizações do repositório remoto.

git pull <repositório-remoto>

Ex: git pull origin master

Essa operação pode causar conflitos que você precisará resolver manualmente.


9. Git revert

Maneira segura de desfazer nossos commits é usando git revert. Para ver nosso histórico de commits, primeiro, precisamos usar git log -- oneline:



Em seguida, precisamos apenas especificar o código hash ao lado do commit que desejamos desfazer:

git revert 3321844

A vantagem de se usar git revert é não tocar no histórico de commits. Isso significa que você ainda pode ver todos os commits do seu histórico, mesmo os revertidos.


10. Git merge

Git merge, basicamente, integra sua branch com o recurso e todos os seus commits na branch de desenvolvimento (dev) ou na branch principal (master ou main). É importante lembrar que, primeiro, você precisa estar na branch específica na qual você quer fazer o merge de sua branch com o recurso.

Por exemplo, ao querer fazer o merge de sua branch do recurso na branch dev:

Primeiro, troque para a branch dev:

git checkout dev

Antes do merge, atualize sua branch dev local:

git fetch

Por fim, faça o merge da sua branch do recurso em dev:

git merge <nome-da-branch-com-o-recurso>

